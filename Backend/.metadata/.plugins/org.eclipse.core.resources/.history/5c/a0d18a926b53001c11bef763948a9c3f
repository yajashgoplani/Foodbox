package com.cart.controller;

import java.util.Arrays;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.cart.bean.Cart;
import com.cart.dao.CartDao;
import com.cart.dto.CartDto;
import com.cart.dto.FoodItemDto;
import com.cart.service.CartService;

@RestController
@CrossOrigin
public class CartController {

	
	@Autowired
	private CartDao dao;
	
	@Autowired
	CartService service;
	
	@Autowired
	RestTemplate restTemplate;
	
	
	@CrossOrigin
	@PostMapping("/carts")
	public CartDto addToCart(@RequestBody CartDto cart, HttpSession session) {
		FoodItemDto foodItemDto[]=restTemplate.getForObject("http://localhost:8082/foodbox/getAllFoods",FoodItemDto[].class);
		List<FoodItemDto> foodItemDtos=Arrays.asList(foodItemDto); 
		
		double grandTotal=0;
		if(session.getAttribute("grandTotal")==null) {
			grandTotal=0;
		}
		else {
			grandTotal=(float) session.getAttribute("grandTotal");
		}
		FoodItemDto foodItem;
		for(FoodItemDto food:foodItemDtos)
			if(cart.getFoodItem().getId()==food.getId())
				foodItem=food;
		
		
		List<Cart> cartList = dao.findAll();
		for(Cart temp:cartList) {
			if(foodItem.getId()==cart.getFoodItem().getId()) {
				int tempQuantity = 1+temp.getQuantity();
				grandTotal=grandTotal+temp.getPrice();
				session.setAttribute("grandTotal", grandTotal);
				service.updatePriceAndQuantity(foodItem.getId(),tempQuantity,temp.getPrice()*tempQuantity);
				return cart;
			}
		}
		int min = 100;
		int max = 999;
		int b = (int) (Math.random() * (max - min + 1) + min);
		cart.setId((long)b);
		cart.setQuantity(1);
		cart.setPrice(cart.getFoodItem().getPrice());
		grandTotal=grandTotal+cart.getFoodItem().getPrice();
		session.setAttribute("grandTotal", grandTotal);
		return dao.save(cart);
	}
/*
	@GetMapping("/carts")
	public List<Cart> getCartItems() {
		return dao.findAll();
	}
	
	@PutMapping("/carts/add/{id}")
	public ResponseEntity<Cart> addByOne(@PathVariable("id") long id,@RequestBody Cart cart){
		--Cart cart = dao.findById(id)
				.orElseThrow(()->new ResourceNotFoundException("Product not found with"+id));--
		int quantity= cart.getQuantity()+1;
		cart.setQuantity(quantity);
		cart.setPrice((cart.getProduct().getPrice())*quantity);
		Cart updatedCart = dao.save(cart);
		return ResponseEntity.ok(updatedCart);
	}
	
	@PutMapping("/carts/minus/{id}")
	public ResponseEntity<Cart> lessByOne(@PathVariable("id") long id,@RequestBody Cart cart){
	
		int quantity= cart.getQuantity()-1;
		if(quantity!=0) {
			cart.setQuantity(quantity);
			cart.setPrice((cart.getProduct().getPrice())*quantity);
			Cart updatedCart = dao.save(cart);
			return ResponseEntity.ok(updatedCart);
		}else {
			dao.deleteById(id);
			return new ResponseEntity<>(HttpStatus.OK);
		}
	}
	
	@DeleteMapping("/carts/{id}")
	public ResponseEntity<?> deleteCart(@PathVariable("id") int id)
	{
		dao.deleteById(id); 
		return new ResponseEntity<>(HttpStatus.OK);
	}
	
	@DeleteMapping("/carts")
	public void deleteAllCart(){
		dao.deleteAll();
	}*/
}
